{"version":3,"file":"component---src-templates-index-page-js-371709fb1fe368961228.js","mappings":"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","sources":["webpack://gatsby-starter-netlify-cms/./src/components/BlogRoll.js","webpack://gatsby-starter-netlify-cms/./src/components/Features.js","webpack://gatsby-starter-netlify-cms/./src/components/FullWidthImage.js","webpack://gatsby-starter-netlify-cms/./src/components/PreviewCompatibleImage.js","webpack://gatsby-starter-netlify-cms/./src/templates/index-page.js"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link, graphql, StaticQuery } from 'gatsby'\r\nimport PreviewCompatibleImage from './PreviewCompatibleImage'\r\n\r\nclass BlogRollTemplate extends React.Component {\r\n  render() {\r\n    const { data } = this.props\r\n    const { edges: posts } = data.allMarkdownRemark\r\n\r\n    return (\r\n      <div className=\"columns is-multiline\">\r\n        {posts &&\r\n          posts.map(({ node: post }) => (\r\n            <div className=\"is-parent column is-6\" key={post.id}>\r\n              <article\r\n                className={`blog-list-item tile is-child box notification ${\r\n                  post.frontmatter.featuredpost ? 'is-featured' : ''\r\n                }`}\r\n              >\r\n                <header>\r\n                  {post.frontmatter.featuredimage ? (\r\n                    <div className=\"featured-thumbnail\">\r\n                      <PreviewCompatibleImage\r\n                        imageInfo={{\r\n                          image: post.frontmatter.featuredimage,\r\n                          alt: `featured image thumbnail for post ${post.frontmatter.title}`,\r\n                          width:\r\n                            post.frontmatter.featuredimage.childImageSharp\r\n                              .gatsbyImageData.width,\r\n                          height:\r\n                            post.frontmatter.featuredimage.childImageSharp\r\n                              .gatsbyImageData.height,\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  ) : null}\r\n                  <p className=\"post-meta\">\r\n                    <Link\r\n                      className=\"title has-text-primary is-size-4\"\r\n                      to={post.fields.slug}\r\n                    >\r\n                      {post.frontmatter.title}\r\n                    </Link>\r\n                    <span> &bull; </span>\r\n                    <span className=\"subtitle is-size-5 is-block\">\r\n                      {post.frontmatter.date}\r\n                    </span>\r\n                  </p>\r\n                </header>\r\n                <p>\r\n                  {post.excerpt}\r\n                  <br />\r\n                  <br />\r\n                  <Link className=\"button\" to={post.fields.slug}>\r\n                    Keep Reading â†’\r\n                  </Link>\r\n                </p>\r\n              </article>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nBlogRoll.propTypes = {\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      edges: PropTypes.array,\r\n    }),\r\n  }),\r\n}\r\n\r\n\r\nexport default function BlogRoll() {\r\n  return (\r\n    <StaticQuery\r\n      query={graphql`\r\n        query BlogRollQuery {\r\n          allMarkdownRemark(\r\n            sort: { order: DESC, fields: [frontmatter___date] }\r\n            filter: { frontmatter: { templateKey: { eq: \"blog-post\" } } }\r\n          ) {\r\n            edges {\r\n              node {\r\n                excerpt(pruneLength: 400)\r\n                id\r\n                fields {\r\n                  slug\r\n                }\r\n                frontmatter {\r\n                  title\r\n                  templateKey\r\n                  date(formatString: \"MMMM DD, YYYY\")\r\n                  featuredpost\r\n                  featuredimage {\r\n                    childImageSharp {\r\n                      gatsbyImageData(\r\n                        width: 120\r\n                        quality: 100\r\n                        layout: CONSTRAINED\r\n                      )\r\n\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      `}\r\n      render={(data, count) => <BlogRollTemplate data={data} count={count} />}\r\n    />\r\n  );\r\n}\r\n","import * as React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport PreviewCompatibleImage from \"../components/PreviewCompatibleImage\";\r\n\r\nconst FeatureGrid = ({ gridItems }) => (\r\n  <div className=\"columns is-multiline\">\r\n    {gridItems.map((item) => (\r\n      <div key={item.text} className=\"column is-6\">\r\n        <section className=\"section\">\r\n          <div className=\"has-text-centered\">\r\n            <div\r\n              style={{\r\n                width: \"240px\",\r\n                display: \"inline-block\",\r\n              }}\r\n            >\r\n              <PreviewCompatibleImage imageInfo={item} />\r\n            </div>\r\n          </div>\r\n          <p>{item.text}</p>\r\n        </section>\r\n      </div>\r\n    ))}\r\n  </div>\r\n);\r\n\r\nFeatureGrid.propTypes = {\r\n  gridItems: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      image: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\r\n      text: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\n\r\nexport default FeatureGrid;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { GatsbyImage } from \"gatsby-plugin-image\";\r\n\r\nexport default function FullWidthImage(props) {\r\n  const {\r\n    height = 400,\r\n    img,\r\n    title,\r\n    subheading,\r\n    imgPosition = \"top left\",\r\n  } = props;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div\r\n        className=\"margin-top-0\"\r\n        style={{\r\n          display: \"grid\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        {img?.url ? (\r\n          <img\r\n            src={img}\r\n            objectFit={\"cover\"}\r\n            objectPosition={imgPosition}\r\n            style={{\r\n              gridArea: \"1/1\",\r\n              // You can set a maximum height for the image, if you wish.\r\n              height: height,\r\n              width: \"100%\",\r\n            }}\r\n            // You can optionally force an aspect ratio for the generated image\r\n            aspectratio={3 / 1}\r\n            // This is a presentational image, so the alt should be an empty string\r\n            alt=\"\"\r\n            formats={[\"auto\", \"webp\", \"avif\"]}\r\n          />\r\n        ) : (\r\n          <GatsbyImage\r\n            image={img}\r\n            objectFit={\"cover\"}\r\n            objectPosition={imgPosition}\r\n            style={{\r\n              gridArea: \"1/1\",\r\n              // You can set a maximum height for the image, if you wish.\r\n              maxHeight: height,\r\n            }}\r\n            layout=\"fullWidth\"\r\n            // You can optionally force an aspect ratio for the generated image\r\n            aspectratio={3 / 1}\r\n            // This is a presentational image, so the alt should be an empty string\r\n            alt=\"\"\r\n            formats={[\"auto\", \"webp\", \"avif\"]}\r\n          />\r\n        )}\r\n        {(title || subheading) && (\r\n          <div\r\n            style={{\r\n              // By using the same grid area for both, they are stacked on top of each other\r\n              gridArea: \"1/1\",\r\n              position: \"relative\",\r\n              // This centers the other elements inside the hero component\r\n              placeItems: \"center\",\r\n              display: \"grid\",\r\n            }}\r\n          >\r\n            {/* Any content here will be centered in the component */}\r\n            {title && (\r\n              <h1\r\n                className=\"has-text-weight-bold is-size-3-mobile is-size-2-tablet is-size-1-widescreen\"\r\n                style={{\r\n                  boxShadow:\r\n                    \"rgb(255, 68, 0) 0.5rem 0px 0px, rgb(255, 68, 0) -0.5rem 0px 0px\",\r\n                  backgroundColor: \"rgb(255, 68, 0)\",\r\n                  color: \"white\",\r\n                  lineHeight: \"1\",\r\n                  padding: \"0.25em\",\r\n                }}\r\n              >\r\n                {title}\r\n              </h1>\r\n            )}\r\n            {subheading && (\r\n              <h3\r\n                className=\"has-text-weight-bold is-size-5-mobile is-size-5-tablet is-size-4-widescreen\"\r\n                style={{\r\n                  boxShadow:\r\n                    \"rgb(255, 68, 0) 0.5rem 0px 0px, rgb(255, 68, 0) -0.5rem 0px 0px\",\r\n                  backgroundColor: \"rgb(255, 68, 0)\",\r\n                  color: \"white\",\r\n                  lineHeight: \"1\",\r\n                  padding: \"0.25rem\",\r\n                  marginTop: \"0.5rem\",\r\n                }}\r\n              >\r\n                {subheading}\r\n              </h3>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nFullWidthImage.propTypes = {\r\n  img: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\r\n  title: PropTypes.string,\r\n  height: PropTypes.number,\r\n  subheading: PropTypes.string,\r\n};\r\n","import * as React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { GatsbyImage } from \"gatsby-plugin-image\";\r\n\r\nconst PreviewCompatibleImage = ({ imageInfo }) => {\r\n  const imageStyle = { borderRadius: \"5px\" };\r\n\r\n  const { alt = \"\", childImageSharp, image } = imageInfo;\r\n\r\n  if (!!image && !!image.childImageSharp) {\r\n    return (\r\n      <GatsbyImage\r\n        image={image.childImageSharp.gatsbyImageData}\r\n        style={imageStyle}\r\n        alt={alt}\r\n      />\r\n    );\r\n  } else if (!!childImageSharp) {\r\n    return (\r\n      <GatsbyImage\r\n        image={childImageSharp.gatsbyImageData}\r\n        style={imageStyle}\r\n        alt={alt}\r\n      />\r\n    );\r\n    // for Netlify CMS \r\n  } else if (image) {\r\n    return <img style={{imageStyle}} src={image} alt={alt} />;\r\n  } else {\r\n    return null\r\n  }\r\n};\r\n\r\nPreviewCompatibleImage.propTypes = {\r\n  imageInfo: PropTypes.shape({\r\n    alt: PropTypes.string,\r\n    childImageSharp: PropTypes.object,\r\n    image: PropTypes.oneOfType([PropTypes.object, PropTypes.string]).isRequired,\r\n    style: PropTypes.object,\r\n  }).isRequired,\r\n};\r\n\r\nexport default PreviewCompatibleImage;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link, graphql } from \"gatsby\";\r\nimport { getImage } from \"gatsby-plugin-image\";\r\n\r\nimport Layout from \"../components/Layout\";\r\nimport Features from \"../components/Features\";\r\nimport BlogRoll from \"../components/BlogRoll\";\r\nimport FullWidthImage from \"../components/FullWidthImage\";\r\n\r\n// eslint-disable-next-line\r\nexport const IndexPageTemplate = ({\r\n  image,\r\n  title,\r\n  heading,\r\n  subheading,\r\n  mainpitch,\r\n  description,\r\n  intro,\r\n}) => {\r\n  const heroImage = getImage(image) || image;\r\n\r\n  return (\r\n    <div>\r\n      <FullWidthImage img={heroImage} title={title} subheading={subheading} />\r\n      <section className=\"section section--gradient\">\r\n        <div className=\"container\">\r\n          <div className=\"section\">\r\n            <div className=\"columns\">\r\n              <div className=\"column is-10 is-offset-1\">\r\n                <div className=\"content\">\r\n                  <div className=\"content\">\r\n                    <div className=\"tile\">\r\n                      <h1 className=\"title\">{mainpitch.title}</h1>\r\n                    </div>\r\n                    <div className=\"tile\">\r\n                      <h3 className=\"subtitle\">{mainpitch.description}</h3>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"columns\">\r\n                    <div className=\"column is-12\">\r\n                      <h3 className=\"has-text-weight-semibold is-size-2\">\r\n                        {heading}\r\n                      </h3>\r\n                      <p>{description}</p>\r\n                    </div>\r\n                  </div>\r\n                  <Features gridItems={intro.blurbs} />\r\n                  <div className=\"columns\">\r\n                    <div className=\"column is-12 has-text-centered\">\r\n                      <Link className=\"btn\" to=\"/products\">\r\n                        See all products\r\n                      </Link>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"column is-12\">\r\n                    <h3 className=\"has-text-weight-semibold is-size-2\">\r\n                      Latest stories\r\n                    </h3>\r\n                    <BlogRoll />\r\n                    <div className=\"column is-12 has-text-centered\">\r\n                      <Link className=\"btn\" to=\"/blog\">\r\n                        Read more\r\n                      </Link>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nIndexPageTemplate.propTypes = {\r\n  image: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\r\n  title: PropTypes.string,\r\n  heading: PropTypes.string,\r\n  subheading: PropTypes.string,\r\n  mainpitch: PropTypes.object,\r\n  description: PropTypes.string,\r\n  intro: PropTypes.shape({\r\n    blurbs: PropTypes.array,\r\n  }),\r\n};\r\n\r\nconst IndexPage = ({ data }) => {\r\n  const { frontmatter } = data.markdownRemark;\r\n\r\n  return (\r\n    <Layout>\r\n      <IndexPageTemplate\r\n        image={frontmatter.image}\r\n        title={frontmatter.title}\r\n        heading={frontmatter.heading}\r\n        subheading={frontmatter.subheading}\r\n        mainpitch={frontmatter.mainpitch}\r\n        description={frontmatter.description}\r\n        intro={frontmatter.intro}\r\n      />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nIndexPage.propTypes = {\r\n  data: PropTypes.shape({\r\n    markdownRemark: PropTypes.shape({\r\n      frontmatter: PropTypes.object,\r\n    }),\r\n  }),\r\n};\r\n\r\nexport default IndexPage;\r\n\r\nexport const pageQuery = graphql`\r\n  query IndexPageTemplate {\r\n    markdownRemark(frontmatter: { templateKey: { eq: \"index-page\" } }) {\r\n      frontmatter {\r\n        title\r\n        image {\r\n          childImageSharp {\r\n            gatsbyImageData(quality: 100, layout: FULL_WIDTH)\r\n          }\r\n        }\r\n        heading\r\n        subheading\r\n        mainpitch {\r\n          title\r\n          description\r\n        }\r\n        description\r\n        intro {\r\n          blurbs {\r\n            image {\r\n              childImageSharp {\r\n                gatsbyImageData(width: 240, quality: 64, layout: CONSTRAINED)\r\n              }\r\n            }\r\n            text\r\n          }\r\n          heading\r\n          description\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"names":["BlogRollTemplate","render","posts","this","props","data","allMarkdownRemark","edges","className","map","post","node","key","id","frontmatter","featuredpost","featuredimage","imageInfo","image","alt","title","width","childImageSharp","gatsbyImageData","height","to","fields","slug","date","excerpt","React","BlogRoll","query","count","gridItems","item","text","style","display","FullWidthImage","img","subheading","imgPosition","alignItems","url","src","objectFit","objectPosition","gridArea","aspectratio","formats","G","maxHeight","layout","position","placeItems","boxShadow","backgroundColor","color","lineHeight","padding","marginTop","imageStyle","borderRadius","IndexPageTemplate","heading","mainpitch","description","intro","heroImage","getImage","blurbs","markdownRemark"],"sourceRoot":""}